version: '3.8'

services:
  # NetBox Application
  netbox:
    image: netboxcommunity/netbox:${VERSION-v3.6}
    container_name: netbox
    hostname: netbox
    depends_on:
      - postgres
      - redis
      - redis-cache
    env_file:
      - .env
    environment:
      CORS_ORIGIN_ALLOW_ALL: 'True'
      DB_HOST: postgres
      DB_NAME: ${POSTGRES_DB}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_USER: ${POSTGRES_USER}
      EMAIL_FROM: netbox@doofus.co
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_PORT: 587
      EMAIL_SERVER: ${EMAIL_SERVER}
      EMAIL_TIMEOUT: 5
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_USE_SSL: 'False'
      EMAIL_USE_TLS: 'True'
      GRAPHQL_ENABLED: 'True'
      HOUSEKEEPING_INTERVAL: 86400
      MEDIA_ROOT: /opt/netbox/netbox/media
      METRICS_ENABLED: 'True'
      REDIS_CACHE_DATABASE: 1
      REDIS_CACHE_HOST: redis-cache
      REDIS_CACHE_INSECURE_SKIP_TLS_VERIFY: 'False'
      REDIS_CACHE_PASSWORD: ${REDIS_CACHE_PASSWORD}
      REDIS_CACHE_SSL: 'False'
      REDIS_DATABASE: 0
      REDIS_HOST: redis
      REDIS_INSECURE_SKIP_TLS_VERIFY: 'False'
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_SSL: 'False'
      REPORTS_ROOT: /opt/netbox/netbox/reports
      SCRIPTS_ROOT: /opt/netbox/netbox/scripts
      SECRET_KEY: ${SECRET_KEY}
      SKIP_SUPERUSER: 'false'
      SUPERUSER_API_TOKEN: ${SUPERUSER_API_TOKEN}
      SUPERUSER_EMAIL: ${SUPERUSER_EMAIL}
      SUPERUSER_NAME: ${SUPERUSER_NAME}
      SUPERUSER_PASSWORD: ${SUPERUSER_PASSWORD}
      WEBHOOKS_ENABLED: 'True'
    user: 'unit:root'
    healthcheck:
      start_period: 60s
      timeout: 3s
      interval: 15s
      test: "curl -f http://localhost:8080/api/ || exit 1"
    volumes:
      - ./netbox-media:/opt/netbox/netbox/media:rw
      - ./netbox-reports:/opt/netbox/netbox/reports:rw
      - ./netbox-scripts:/opt/netbox/netbox/scripts:rw
      - ./netbox-plugins:/opt/netbox/netbox/plugins:rw
    restart: unless-stopped

  # NetBox Worker for Background Tasks
  netbox-worker:
    image: netboxcommunity/netbox:${VERSION-v3.6}
    container_name: netbox-worker
    depends_on:
      - postgres
      - redis
      - redis-cache
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      DB_NAME: ${POSTGRES_DB}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_USER: ${POSTGRES_USER}
      REDIS_CACHE_DATABASE: 1
      REDIS_CACHE_HOST: redis-cache
      REDIS_CACHE_PASSWORD: ${REDIS_CACHE_PASSWORD}
      REDIS_DATABASE: 0
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
    command: >
      sh -c "python /opt/netbox/netbox/manage.py rqworker"
    healthcheck:
      start_period: 20s
      timeout: 3s
      interval: 15s
      test: "ps -aux | grep -v grep | grep -q rqworker || exit 1"
    volumes:
      - ./netbox-media:/opt/netbox/netbox/media:rw
      - ./netbox-reports:/opt/netbox/netbox/reports:rw
      - ./netbox-scripts:/opt/netbox/netbox/scripts:rw
      - ./netbox-plugins:/opt/netbox/netbox/plugins:rw
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: netbox-postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: netbox-redis
    command: >
      sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    env_file:
      - .env
    volumes:
      - ./redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis-cache:
    image: redis:7-alpine
    container_name: netbox-redis-cache
    command: >
      sh -c "redis-server --requirepass $$REDIS_CACHE_PASSWORD"
    env_file:
      - .env
    volumes:
      - ./redis-cache-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Caddy Reverse Proxy for HTTPS
  netbox-caddy:
    image: caddy:2-alpine
    container_name: netbox-caddy
    environment:
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./caddy-data:/data
      - ./caddy-config:/config
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - netbox
    restart: unless-stopped

  # Network Discovery Service
  netbox-discovery:
    image: python:3.11-slim
    container_name: netbox-discovery
    depends_on:
      - netbox
    env_file:
      - .env
    environment:
      NETBOX_URL: http://netbox:8080
      NETBOX_TOKEN: ${SUPERUSER_API_TOKEN}
      DISCOVERY_NETWORKS: ${DISCOVERY_NETWORKS}
      DNS_SERVER: ${DNS_SERVER}
    volumes:
      - ./discovery-scripts:/app
    working_dir: /app
    command: >
      sh -c "pip install -r requirements.txt && python discovery-agent.py"
    restart: unless-stopped

networks:
  default:
    name: netbox-network
    driver: bridge